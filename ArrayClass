/***************************************************************************
** Kristie Parsons - Assignment # 1
**
** File: ArrayClass
** Author: Kristie Parsons
** Class: CS 260
** Create Date: 6/24/14
** 
** Description of Program:
** 
** 
*****************************************************************************/

// ASSIGNMENT INSTRUCTIONS
/** 
    SIMILAR PROBLEMS ON PAGE 44 IN BOOK
    Create a class for an unordered	array	of	integers	named	ArrayClass.	
    ArrayClass() – constructor that	creates an	array	of	100 elements.	
    ArrayClass(int n) –	constructor	that creates an array of n	elements.
    bool	addElem(int	n) – adds the integer n	to	the array in the next available location,	
    returns	false	if	this is not possible.	
    bool	delElem() –	deletes the	last added element, return	false	if	array	is	empty.	
    int	howMany() – returns the number	of	elements	in	the array.	
    string curElems() –	returns a string listing the current elements, ten	per line.	
   	
    Write a	main program that	demonstrates that	your program properly works and handles possible errors.	
   	
    2) Add a method getLargest() to	this class that returns	the largest	element and	removes it	
    from	the array. Assume	that the	array	may contain	duplicates and	any valid integer	value.	
    	
    Show that this method works	properly.	
   	
    3) Create an additional method deleteDups()	that removes any duplicate	entries.			
   	
    Again, you	will need to show	that it	works	properly	and handles	potential issues. List the	
    elements of the array before	starting	and after completion.	
   	
    4) Create an array and fill it with random numbers. Then using the getLargest() method 
    from	problem 2 above, create	a second	array	that contains those numbers in sorted order.			
   	
    List	the first array before	starting	and the second array after	completion. Show that your	
    program	deals	with potential	issues.
**/

import java.util.Random;


//PART ONE
public class ArrayClass
{
   private static int DEFAULT_SIZE = 100;    //Defines the size of array
   private int arraySize;                    //Holds total # of element in the array
   private int count;                        //Holds # of values in array
   private int[] array;                      //Creates array
   
   
   //Constructor that creates default size for the array.	
   public ArrayClass()
   {
      arraySize = DEFAULT_SIZE;
      array = new int[arraySize];
   }
   
   //Default constructor that creates an array of n elements.
   public ArrayClass(int n)
   {
      arraySize = n;
      array = new int[arraySize];
   }
   
   //Gets array size
   public int getArraySize()
   {
      return arraySize;
   }
   
   //Fills array with random integers
   public void fillArray()
   {  
      
      Random random = new Random();                           
      int maxInt = 25;                //The max integer that random can create
      
      random.nextInt(maxInt);   
         
      //Fills array
      for (int i = 0; i < arraySize; i++)
      {
         array[i] = random.nextInt(maxInt);
         addElem(array[i]);
         curElems();
      
         int index = count; //
         
         while (index != 0 && array[index-1] > arraySize) //Finds empty place for value
         {
            array[index] = array[index-1];   
            index++;                         //Increment size
            array[index] = arraySize;            
         }//End while
       }  
   }//End fillArray
   
   
   //Adds the integer value to the array in the next available location, returns false if this is not possible.
   public boolean addElem(int	value)
   {
      //Checks to see if there is space in the array
      if (count == arraySize)
      {
         arraySize *= 2;                       //Doubles size of array
         int[] newArray = new int[arraySize];  //Creates new array with new size
         for ( int i = 0; i < count; i++)      //Adds array elements to newArray 
         {   
            newArray[i] = array[i];
            array = newArray;
         }//End of for loop
         
         int index = count; //
         
         while (index != 0 && array[index-1] > value) //Finds empty place for value
         {
            array[index] = array[index-1];   
            index++;                                  //Increment size
            array[index] = value;            
         }//End while
         
        return true;
        
      }
      else return false;
     
   }//End addElement
   
   //Deletes the last added element, return false if array is empty.
   public boolean delElem(int value)
   {  
      if(arraySize > 0)
      {
         arraySize--;
         return true;
      }
      else return false;
   
      /*
      int index = howMany(value);            //Returns index if value is found
      
      if (index == -1)                       //If value is not found, return false             
      {
         System.out.println("Value not found");
         return false;
      }
      
      if()     //Moves index down when value is deleted
      {
         array[i]= array[i + 1];
         count--;
      }
      return true;
      */
   }//End delElement
   
   //Returns the number	of	elements	in	the array.
   private int howMany(int value)
   {  
      count = arraySize;    
      
      if (count == 0)       //Checks to see if array is empty
      {                     
         return -1;
      }
      else return count;
      
   }//End howMany
   
   //Returns a string listing the current elements, ten	per line.
   public String curElems()
   {
      String curElements = "";              //Sets string
      int wordCount = 0;                    //Sets # of words 
      
      //Goes through array
      for(int i = 0; i < arraySize; i++)
      {  
         wordCount++;                       //Increases wordCount
         curElements += array[i] + ", ";    //Adds array to curElements String
         
         if(wordCount == 10)                //If wordCount = 10
         {                                  
            curElements += "\n";            //Go to next line 
            wordCount = 0;                  //Reset wordCount to zero
            
         }//End if
         
      }//End for

      return curElements;
  }//End curElems
  
  
  
  //PART TWO
  
  //Sorts array from smallest to largest
  public void selectionSort()
  {
      int out, in, min;
      
      for (out = 0; out < arraySize; out++)     //Outer loop
      {
         min = out;                             //Minimum
         
         for(in = out + 1; in < arraySize; in++)//Inner loop   
         {
            if(array[in] < array[min])          //If min is greater
            {
               min = in;                        //New min
               
            }//End for(in)
            
            swap(out, min);                     //Swap
            
         }//End for(out)
         
      }//End selectionSort
   }
  
  private void swap(int one, int two)
  {
      int temp = array[one];
      array[one] = array[two];
      array[two] = temp;
  }
  
  
  //Returns the largest element and removes it from the array.
  //Assume that the array may	contain duplicates and any	valid	integer value
  public int getLargest()
  {
      int element = 0;                          //Sets element to zero
      
      for (int i = 0; i < arraySize; i ++)      //Go through array
      {
         if (array[i] > array[element])         //Find largest element array
         {
            element = i;                        //Set element equal to i if i is larger
         }
      }
      int largestVal = array[element];          //Holds largest int value
      array[element] = array[arraySize - 1];    //Moves last int down
      delElem(largestVal);                      //Removes largest value
     
      return largestVal;
      
  }//End getLargest
  
  public void deleteDups()
  {   
      for(int i = 0 ; i < arraySize; i++)        // set loop to step through  
      {        
         for(int j = i+1; j < arraySize; j++)    // compare starting from the next element  
         {         
            if(array[i] == array[j])                // if a duplicate is found  
            {  
               this.unsortDelete(array[j]);          // delete it  
               j--;                        // to check the element j+2, which now becomes j+1 and would be skipped otherwise  
            }
         }
      }
  
      /*
      for (int i = 0; i < arraySize; i++) 
      {
         for (int j = i + 1; j < arraySize; j++)
         {
            if (array[i] == array[j])
            {                  
                unsortDelete(j);
                j--;
            }
        }
      }*/
  }
  
  private boolean unsortDelete(int value)
  {
      int j;  
        for(j = 0; j < arraySize; j++)            
            if(value == array[j] )  
                break;  
        if(j == arraySize)
        {
            return false;  
        }    
        else  
        {  
            for(int k = j; k < arraySize; k++)  
                array[k] = array[k+1];  
            arraySize--;  
            return true;  
        }
      /*
      array[place] = array[arraySize - 1];
      arraySize--;
      */
  }
      
      
}
